.SILENT :
.PHONY : help volume mount build clean cleanup start stop rm shell logs

# Get IP of the running container
IP:=`sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(APPNAME)`

# Default Docker run flags
RUN_FLAGS?=-d -h $(APPNAME) --name $(APPNAME)
# Default Docker run command
RUN_CMD?=

# Default Docker run flags for shell access
SHELL_FLAGS?=--rm -it -h $(APPNAME) --entrypoint="/bin/bash"
# Default Docker run command for shell access
SHELL_CMD?=-c /bin/bash

# Volume base directory on the host
VOLUME_HOST_BASE?=~/var
# Volume base directory into the container
VOLUME_CONTAINER_BASE?=/var/opt
# Volume flags
VOLUME_FLAGS:=

# Default action
all: build

## This help screen
help:
	printf "Available targets:\n\n"
	awk '/^[a-zA-Z\-\_0-9]+:/ { \
		helpMessage = match(lastLine, /^## (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")); \
			helpMessage = substr(lastLine, RSTART + 3, RLENGTH); \
			printf "%-15s %s\n", helpCommand, helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)

## Build the volume image
volume:
	echo "Building volumes: $(VOLUME_HOST_BASE)/$(APPNAME) -> $(VOLUME_CONTAINER_BASE)/$(APPNAME) ..."
	sudo docker run -v $(VOLUME_HOST_BASE)/$(APPNAME):$(VOLUME_CONTAINER_BASE)/$(APPNAME) --name $(APPNAME)_volumes busybox true

## Mount volume
mount:
	$(eval VOLUME_FLAGS += --volumes-from $(APPNAME)_volumes)
	echo "Using volumes from $(APPNAME)_volumes"

## Build the image
build:
	echo "Building $(IMAGE) docker image..."
	sudo docker build --rm -t $(IMAGE) .

## Remove the image (also stop and delete the container)
clean: stop rm
	echo "Removing $(IMAGE) docker image..."
	-sudo docker rmi $(IMAGE)

## Remove dangling images
cleanup:
	echo "Removing dangling docker images..."
	-sudo docker images -q --filter 'dangling=true' | xargs sudo docker rmi

## Start the container
start:
	echo "Starting $(IMAGE) docker image..."
	sudo docker run $(RUN_FLAGS) $(VOLUME_FLAGS) $(docker_run_flags) $(IMAGE) $(RUN_CMD)

## Stop the container
stop:
	echo "Stopping container $(APPNAME) ..."
	-sudo docker stop $(APPNAME)

## Delete the container
rm:
	echo "Deleting container $(APPNAME) ..."
	-sudo docker rm $(APPNAME)

## Run the container with shell access
shell:
	echo "Running $(IMAGE) docker image with shell access..."
	sudo docker run $(SHELL_FLAGS) $(VOLUME_FLAGS) $(IMAGE) $(SHELL_CMD)

## Show container logs
logs:
	echo "Logs of the $(APPNAME) container..."
	sudo docker logs -f $(APPNAME)

